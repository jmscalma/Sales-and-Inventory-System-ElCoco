/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package salesAndInventorySystem;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author james
 */
public class PurchasedOrder extends javax.swing.JFrame {
    
    public static String supplierid;
    public static String sname;
    
    /** Creates new form PurchasedOrder */
    public PurchasedOrder() {
        initComponents();
        suppSelect();
        loadPoInvoiceNo();
        showIcon();
        selectProduct();
       
    }
    
    private void showIcon(){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("wine__.png")));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    
    public void loadPoInvoiceNo(){
        try{
            
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM po_invoice WHERE po_invoice_id =1");
            
            if(rs.next()){
                
                poInvoiceNo.setText(rs.getString("po_value"));
            }
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
        
        int i = Integer.valueOf(poInvoiceNo.getText());
        i++;
        poInvoiceNo.setText(String.valueOf(i));
        
    }
    public void totalAmount(){
        //amount due
        int numofrow = cartTable.getRowCount();
        double total = 0;
        
        for(int i = 0; i < numofrow; i++){
            
            double value = Double.valueOf(cartTable.getValueAt(i, 5).toString());
            total += value;
        }
        
        totalAmountTf.setText(Double.toString(total));
        
        //total quantity
        int numofrow1 = cartTable.getRowCount();
        int total1 = 0;
        
        for(int i = 0; i < numofrow1; i++){
            
            int value1 = Integer.valueOf(cartTable.getValueAt(i, 4).toString());
            total1 += value1;
        }
        
        totalQuantity.setText(Integer.toString(total1));
    }
    
    public void amountChange(){
        
        Double paidAmount = Double.valueOf(amountPaidTf.getText());
        Double amountDue = Double.valueOf(totallTf.getText());
        Double change;
        
        change = paidAmount - amountDue;
        
        changeTf.setText(String.valueOf(change));
    
    }
    
    public void suppSelect(){
        
        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM supplier_maintenance");
            Vector v = new Vector();
            
            while(rs.next()){
                v.add(rs.getString("suppliername"));
                
                DefaultComboBoxModel com = new DefaultComboBoxModel(v);
                supplierSelect.setModel(com);
            }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    public void suppProductSelect(){
        
        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM supplier_maintenance");
            Vector v = new Vector();
            
            while(rs.next()){
                v.add(rs.getString("suppliername"));
                
                DefaultComboBoxModel com = new DefaultComboBoxModel(v);
                supplierSelect.setModel(com);
            }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    public void selectProduct(){
        sname = supplierSelect.getSelectedItem().toString();
        
        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM supplier_products WHERE suppliername = '"+sname+"' ");
            Vector v = new Vector();
            
            while(rs.next()){
                v.add(rs.getString("product"));
                
                DefaultComboBoxModel com = new DefaultComboBoxModel(v);
                productSelect.setModel(com);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    public void showPrice(){
        String prod = productSelect.getSelectedItem().toString();
        
        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM supplier_products WHERE product = '"+prod+"' ");
            Vector v = new Vector();
            
            while(rs.next()){
                v.add(rs.getString("price"));
                
                DefaultComboBoxModel com = new DefaultComboBoxModel(v);
                priceShow.setModel(com);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    
    public void resetFields(){
        supplierSelect.setSelectedIndex(0);
        quantityTf.setText("0");
        totallTf.setText("0.00");
        orderStatusSelect.setSelectedIndex(0);
        deliveryTypeSelect.setSelectedIndex(0);
        paymentModeSelect.setSelectedIndex(0);
        amountPaidTf.setText("0.00");
        changeTf.setText("0.00");
        
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        poInvoiceNo = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        quantityTf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        removeToCartBtn = new javax.swing.JButton();
        saveAndPrintBtn = new javax.swing.JButton();
        amountPaidTf = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        changeTf = new javax.swing.JTextField();
        totalAmountTf = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        addToCartBtn = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        supplierSelect = new javax.swing.JComboBox<>();
        totallTf = new javax.swing.JTextField();
        totalQuantity = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        orderStatusSelect = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        deliveryTypeSelect = new javax.swing.JComboBox<>();
        paymentModeSelect = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        productSelect = new javax.swing.JComboBox<>();
        priceShow = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(44, 119, 33), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO Invoice ID", "Supplier Name", "Product", "Price", "Quantity", "Total", "Order Status", "Delivery Type", "Payment Mode", "Payment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cartTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(cartTable);
        if (cartTable.getColumnModel().getColumnCount() > 0) {
            cartTable.getColumnModel().getColumn(0).setResizable(false);
            cartTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            cartTable.getColumnModel().getColumn(1).setResizable(false);
            cartTable.getColumnModel().getColumn(2).setResizable(false);
            cartTable.getColumnModel().getColumn(3).setResizable(false);
            cartTable.getColumnModel().getColumn(4).setResizable(false);
            cartTable.getColumnModel().getColumn(5).setResizable(false);
            cartTable.getColumnModel().getColumn(6).setResizable(false);
            cartTable.getColumnModel().getColumn(7).setResizable(false);
            cartTable.getColumnModel().getColumn(8).setResizable(false);
            cartTable.getColumnModel().getColumn(9).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1490, 320));

        jPanel3.setBackground(new java.awt.Color(0, 224, 145));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("SUPPLY ORDERS");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 370, 50));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1490, 51));

        poInvoiceNo.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        poInvoiceNo.setText("01");
        jPanel1.add(poInvoiceNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, -1, 40));

        jLabel9.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel9.setText("Product");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, 40));

        jLabel11.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 600, -1, 40));

        jLabel10.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel10.setText("Price");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 550, -1, 40));

        quantityTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        quantityTf.setText("0");
        quantityTf.setToolTipText("");
        quantityTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        quantityTf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quantityTfMouseClicked(evt);
            }
        });
        quantityTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityTfKeyReleased(evt);
            }
        });
        jPanel1.add(quantityTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 600, 230, 40));

        jLabel12.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel12.setText("Quantity");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 600, -1, 40));

        jLabel14.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel14.setText("Total");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 650, -1, 40));

        removeToCartBtn.setBackground(new java.awt.Color(44, 119, 33));
        removeToCartBtn.setFont(new java.awt.Font("Franklin Gothic Book", 0, 32)); // NOI18N
        removeToCartBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeToCartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove to cart.png"))); // NOI18N
        removeToCartBtn.setText("REMOVE");
        removeToCartBtn.setFocusable(false);
        removeToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToCartBtnActionPerformed(evt);
            }
        });
        jPanel1.add(removeToCartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 490, 400, 70));

        saveAndPrintBtn.setBackground(new java.awt.Color(44, 119, 33));
        saveAndPrintBtn.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 24)); // NOI18N
        saveAndPrintBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveAndPrintBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        saveAndPrintBtn.setText("SAVE AND PRINT");
        saveAndPrintBtn.setFocusable(false);
        saveAndPrintBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveAndPrintBtnMouseClicked(evt);
            }
        });
        saveAndPrintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndPrintBtnActionPerformed(evt);
            }
        });
        jPanel1.add(saveAndPrintBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 670, 320, 60));

        amountPaidTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        amountPaidTf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amountPaidTf.setText("0.00");
        amountPaidTf.setToolTipText("");
        amountPaidTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        amountPaidTf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                amountPaidTfMouseClicked(evt);
            }
        });
        amountPaidTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountPaidTfKeyReleased(evt);
            }
        });
        jPanel1.add(amountPaidTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 600, 300, 70));

        jLabel15.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel15.setText("Amount Paid");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 600, -1, 70));

        jLabel17.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel17.setText("Change");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 680, 80, 40));

        changeTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        changeTf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        changeTf.setText("0.00");
        changeTf.setToolTipText("");
        changeTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        changeTf.setEnabled(false);
        jPanel1.add(changeTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 680, 300, 40));

        totalAmountTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        totalAmountTf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalAmountTf.setText("0.00");
        totalAmountTf.setToolTipText("");
        totalAmountTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        totalAmountTf.setEnabled(false);
        jPanel1.add(totalAmountTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 610, 320, 50));

        jLabel18.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel18.setText("Total Amount");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 570, 140, 40));

        addToCartBtn.setBackground(new java.awt.Color(44, 119, 33));
        addToCartBtn.setFont(new java.awt.Font("Franklin Gothic Book", 0, 32)); // NOI18N
        addToCartBtn.setForeground(new java.awt.Color(255, 255, 255));
        addToCartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add to cart.png"))); // NOI18N
        addToCartBtn.setText("ADD");
        addToCartBtn.setFocusable(false);
        addToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addToCartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 410, 400, 70));

        jLabel19.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel19.setText("Supplier Name");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, -1, 40));

        jLabel20.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel20.setText("PO INVOICE ID:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, 40));

        supplierSelect.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        supplierSelect.setFocusable(false);
        supplierSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierSelectActionPerformed(evt);
            }
        });
        jPanel1.add(supplierSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 230, 40));

        totallTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        totallTf.setText("0.00");
        totallTf.setToolTipText("");
        totallTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        totallTf.setEnabled(false);
        jPanel1.add(totallTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 650, 230, 40));

        totalQuantity.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        totalQuantity.setText("0");
        jPanel1.add(totalQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 400, 120, 40));

        jLabel21.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel21.setText("TOTAL QUANTITY:");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 400, -1, 40));

        orderStatusSelect.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        orderStatusSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ordered", "On-hand", "Delivered", "Not yet delivered" }));
        orderStatusSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderStatusSelectActionPerformed(evt);
            }
        });
        jPanel1.add(orderStatusSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 450, 230, 40));

        jLabel22.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel22.setText("Status");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 450, -1, 40));

        jLabel23.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel23.setText("Delivery Type");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 500, -1, 40));

        deliveryTypeSelect.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        deliveryTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scheduled Delivery", "Self Pick-up" }));
        deliveryTypeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryTypeSelectActionPerformed(evt);
            }
        });
        jPanel1.add(deliveryTypeSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 500, 230, 40));

        paymentModeSelect.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        paymentModeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Mobile Payment" }));
        paymentModeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeSelectActionPerformed(evt);
            }
        });
        jPanel1.add(paymentModeSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 550, 230, 40));

        jLabel24.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel24.setText("Payment Mode");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 550, -1, 40));

        productSelect.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        productSelect.setFocusable(false);
        productSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productSelectActionPerformed(evt);
            }
        });
        jPanel1.add(productSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 500, 230, 40));

        priceShow.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        priceShow.setEnabled(false);
        priceShow.setFocusable(false);
        priceShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceShowActionPerformed(evt);
            }
        });
        jPanel1.add(priceShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, 230, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1510, 765));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void quantityTfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quantityTfMouseClicked
        quantityTf.setText("");
    }//GEN-LAST:event_quantityTfMouseClicked

    private void quantityTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTfKeyReleased

        Double quantity = Double.valueOf(quantityTf.getText().trim());
        double price = Double.valueOf(priceShow.getSelectedItem().toString());

        double total = quantity * price;

        totallTf.setText(String.valueOf(total));

    }//GEN-LAST:event_quantityTfKeyReleased

    private void removeToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToCartBtnActionPerformed
        try{

            DefaultTableModel dt = (DefaultTableModel)cartTable.getModel();
            int rw = cartTable.getSelectedRow();
            dt.removeRow(rw);
        }catch(Exception e){

        }

        totalAmount();
    }//GEN-LAST:event_removeToCartBtnActionPerformed

    private void saveAndPrintBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveAndPrintBtnMouseClicked

        

    }//GEN-LAST:event_saveAndPrintBtnMouseClicked

    private void saveAndPrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndPrintBtnActionPerformed
        int x = cartTable.getRowCount();
        if(amountPaidTf.getText().matches(".*[a-zA-Z]+.*")){
                JOptionPane.showMessageDialog(this, "Incorrect Input!", "Error", JOptionPane.ERROR_MESSAGE);
                amountPaidTf.setText("0.00");
            }else if(x == 0){
                JOptionPane.showMessageDialog(this, "Cart is Empty!", "Error", JOptionPane.ERROR_MESSAGE);
                
            }else{
        try{
            
            DefaultTableModel dt = (DefaultTableModel)cartTable.getModel();
            int rc = dt.getRowCount();
            
            
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(d);
            
            for(int i = 0; i < rc; i++){
                
                String po_invoice_id = dt.getValueAt(i, 0).toString();
                String suppliername = dt.getValueAt(i, 1).toString();
                String productname = dt.getValueAt(i, 2).toString();
                String price = dt.getValueAt(i, 3).toString();
                String quantity = dt.getValueAt(i, 4).toString();
                String total = dt.getValueAt(i, 5).toString();
                String orderstatus = dt.getValueAt(i, 6).toString();
                String deliverytype = dt.getValueAt(i, 7).toString();
                String modeofpayment = dt.getValueAt(i, 8).toString();
                String paymentStatus = dt.getValueAt(i, 9).toString();
                
                //cart
                Statement s = DBConnector.mycon().createStatement();
                

                s.executeUpdate("INSERT INTO po_cart (`po_invoice_id`, `suppliername`, `product`, `price`, `quantity`, `total`, `orderstatus`, `deliverytype`, `modeofpayment`, `paymentstatus`, `date`) "
                    + "VALUES ('"+po_invoice_id+"','"+suppliername+"','"+productname+"','"+price+"','"+quantity+"','"+total+"','"+orderstatus+"','"+deliverytype+"','"+modeofpayment+"','"+paymentStatus+"','"+date+"')");
            
            }
            
            JOptionPane.showMessageDialog(rootPane, "Added Successfully!");
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
       
       try{
            
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(d);
            
            //String suppliername = supplierSelect.getSelectedItem().toString();
            String po_invoice_id = poInvoiceNo.getText();
            String totalquantity = totalQuantity.getText();
            String totalamount = totalAmountTf.getText();
            /*
            String balance = changeTf.getText();
            String orderstatus = orderStatusSelect.getSelectedItem().toString();
            String deliverytype = deliveryTypeSelect.getSelectedItem().toString();
            String modeofpayment = paymentModeSelect.getSelectedItem().toString();
            
            //status
            Double tot = Double.valueOf(totalAmountTf.getText());
            Double pid = Double.valueOf(amountPaidTf.getText());
            String status = null;
            if(pid.equals(0.00)){
                
                status = "Unpaid";
            
            }else if(tot > pid){
                
                status = "Partially Paid";
            }else if(tot < pid){
                
                status = "Paid";
            }
            */
            //# # # purchased_order_id, po_invoice_id, supplier_id, suppliername, totalquantity, amountdue, status, balance, orderstatus, deliverytype, modeofpayment, date

            //# po_invoice_id, totalquantity, totalamount, date
            Statement s = DBConnector.mycon().createStatement();
            s.executeUpdate("INSERT INTO purchased_order (po_invoice_id, totalquantity, totalamount, date) "
                    + "VALUES ('"+po_invoice_id+"','"+totalquantity+"','"+totalamount+"','"+date+"')");
            
            
            
        }catch(HeadlessException | SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
        
        JOptionPane.showMessageDialog(rootPane, "Saved Successfully!");
        
        //PRINT
        try{
            
            DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
            JRTableModelDataSource ds = new JRTableModelDataSource(model);
            String r = "C:\\Users\\james\\Documents\\2y1 Activities\\OOP Projects\\ElCoco\\src\\reports\\PurchasedOrderInvoiceReport.jrxml";
            
            JasperReport jr = JasperCompileManager.compileReport(r);
            
            //get sum of amount due
            double total = 0.0;
            for (int ix = 0; ix < cartTable.getRowCount(); ix++){
                double amount = Double.parseDouble(cartTable.getValueAt(ix, 5).toString());
                total += amount;
            }
            System.out.println(total);
            
            String amountpaidd = amountPaidTf.getText();
            
            String change_balancee = changeTf.getText();
            double amountp = Double.valueOf(amountpaidd);
            
            double newchange = amountp - total;
            
            HashMap<String, Object> p = new HashMap<String, Object>();
            p.put("amountdue", total);
            p.put("amountpaid", amountpaidd);
            p.put("change_balance", newchange);
            
            JasperPrint jp = JasperFillManager.fillReport(jr, p, ds);
            
            JasperViewer.viewReport(jp, false);
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
       
        DefaultTableModel dt = (DefaultTableModel)cartTable.getModel();
        dt.setRowCount(0);
        
        try{
            
            String id = poInvoiceNo.getText();
            Statement s = DBConnector.mycon().createStatement();
            s.executeUpdate("UPDATE po_invoice SET po_value='"+id+"' WHERE po_invoice_id = 1");
            
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
        
        loadPoInvoiceNo();
       
        }
    }//GEN-LAST:event_saveAndPrintBtnActionPerformed

    private void amountPaidTfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_amountPaidTfMouseClicked
        amountPaidTf.setText("");
    }//GEN-LAST:event_amountPaidTfMouseClicked

    private void amountPaidTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountPaidTfKeyReleased

        amountChange();

    }//GEN-LAST:event_amountPaidTfKeyReleased

    private void addToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBtnActionPerformed
        //payment status
            Double tot = Double.valueOf(totallTf.getText());
            Double pid = Double.valueOf(amountPaidTf.getText());
            String paymentstatus = "";
            System.out.println(pid);
            if(pid.equals(0.0)){
                
                paymentstatus = "Unpaid";
            
            }else if(tot > pid){
                
                paymentstatus = "Partially Paid";
            }else if(tot < pid){
                
                paymentstatus = "Paid";
            }
        
        try{
            DefaultTableModel dt = (DefaultTableModel)cartTable.getModel();
            Vector v = new Vector();
        
            v.add(poInvoiceNo.getText());
            v.add(supplierSelect.getSelectedItem().toString());
            v.add(productSelect.getSelectedItem().toString());
            v.add(priceShow.getSelectedItem().toString());
            v.add(quantityTf.getText());
            v.add(totallTf.getText());
            v.add(orderStatusSelect.getSelectedItem().toString());
            v.add(deliveryTypeSelect.getSelectedItem().toString());
            v.add(paymentModeSelect.getSelectedItem().toString());
            v.add(paymentstatus);
            
            String a = priceShow.getSelectedItem().toString();
            String b = quantityTf.getText();
            String c = amountPaidTf.getText();
            
            if(a.matches(".*[a-zA-Z]+.*") || b.matches(".*[a-zA-Z]+.*") || c.matches(".*[a-zA-Z]+.*")){
                JOptionPane.showMessageDialog(this, "Incorrect Input!", "Error", JOptionPane.ERROR_MESSAGE);
            }else if(a.equals("") || quantityTf.getText().equals("") || quantityTf.getText().equals("0")){
                JOptionPane.showMessageDialog(this, "Fill in Inputs!", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                
                dt.addRow(v);
                JOptionPane.showMessageDialog(this, "Added to Cart!");
            }
        
        }catch(InputMismatchException | NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Invalid Inputs!");
        }
        resetFields();
        totalAmount();
        


        /*
        if(productIdTf.equals("") || flavorTf.equals("") || sizeTf.equals("") || priceTf.equals("") || quantityTf.equals("") ){
            JOptionPane.showMessageDialog(this, "Incomplete product data!");
        }
        else{

            String invoice_id = invoiceNo.getText();
            String product_id = productIdTf.getText();
            String flavor = flavorTf.getText();
            String price = priceTf.getText();
            String quantity = quantityTf.getText();
            String total = totalTf.getText();

            try{

                Statement s = DBConnector.mycon().createStatement();
                s.executeUpdate("INSERT INTO cart (`invoice_id`, `product_id`, `flavor`, `size`, `price`, `quantity`, `total`) "
                    + "VALUES ('"+invoice_id+"','"+product_id+"','"+flavor+"','"+price+"','"+quantity+"','"+total+"')");

                JOptionPane.showMessageDialog(rootPane, "Added Successfully!");

                int in = Integer.valueOf(invoice_id);
                int newIn = ++in;
                productIdTf.setText("");
                invoiceNo.setText(String.valueOf(newIn));
                flavorTf.setText("");
                priceTf.setText("");
                quantityTf.setText("0");
                totalTf.setText("0.00");

            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        */

    }//GEN-LAST:event_addToCartBtnActionPerformed

    private void supplierSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierSelectActionPerformed

        String name = supplierSelect.getSelectedItem().toString();

        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT supplier_id,suppliername FROM supplier_maintenance WHERE suppliername ='"+name+"' ");
            if(rs.next()){

                supplierid = (rs.getString("supplier_id"));

            }

        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }
        
        selectProduct();
    }//GEN-LAST:event_supplierSelectActionPerformed

    private void orderStatusSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderStatusSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderStatusSelectActionPerformed

    private void deliveryTypeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryTypeSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryTypeSelectActionPerformed

    private void paymentModeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentModeSelectActionPerformed

    private void productSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productSelectActionPerformed
        quantityTf.setText("");
        totallTf.setText("");
        showPrice();
    }//GEN-LAST:event_productSelectActionPerformed

    private void priceShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceShowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchasedOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchasedOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchasedOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchasedOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchasedOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartBtn;
    private javax.swing.JTextField amountPaidTf;
    private javax.swing.JTable cartTable;
    private javax.swing.JTextField changeTf;
    private javax.swing.JComboBox<String> deliveryTypeSelect;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> orderStatusSelect;
    private javax.swing.JComboBox<String> paymentModeSelect;
    private javax.swing.JLabel poInvoiceNo;
    private javax.swing.JComboBox<String> priceShow;
    private javax.swing.JComboBox<String> productSelect;
    private javax.swing.JTextField quantityTf;
    private javax.swing.JButton removeToCartBtn;
    private javax.swing.JButton saveAndPrintBtn;
    private javax.swing.JComboBox<String> supplierSelect;
    private javax.swing.JTextField totalAmountTf;
    private javax.swing.JLabel totalQuantity;
    private javax.swing.JTextField totallTf;
    // End of variables declaration//GEN-END:variables

}

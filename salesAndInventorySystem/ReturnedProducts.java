/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesAndInventorySystem;


import java.awt.Toolkit;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author james
 */
public class ReturnedProducts extends javax.swing.JFrame {

    /**
     * Creates new form ReturnedProducts
     */
    public static String customerid;
    public static String currentStocks;
    
    public ReturnedProducts() {
        initComponents();
        setRecordsToTable();
        showIcon();
    }
    
    private void showIcon(){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("wine__.png")));
    }
    
    public void setRecordsToTable(){
        
        try
        {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/el_coco_db","root","root");
            PreparedStatement pst = con.prepareStatement("SELECT * FROM returned_products");
            ResultSet rs = pst.executeQuery();
            
            while(rs.next()){
                
                int returned_product_id = rs.getInt("returned_product_id");
                int customer_id = rs.getInt("customer_id");
                String customername = rs.getString("customername");
                int product_id = rs.getInt("product_id");
                int stocksreturned = rs.getInt("stocksreturned");
                String reason = rs.getString("reason");
                String date = rs.getString("date");
                
                Object[] obj = {returned_product_id, customer_id, customername, product_id, stocksreturned, reason, date };
                
                DefaultTableModel model = (DefaultTableModel)returnedProductsTable.getModel();
                model.addRow(obj);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        customerNameTf = new javax.swing.JTextField();
        reasonTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        addNewProductBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        searchTf = new javax.swing.JTextField();
        editBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        returnedProductsTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        stocksReturnedTf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        productIdTf = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        customerNameTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        customerNameTf.setToolTipText("");
        customerNameTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        customerNameTf.setEnabled(false);
        customerNameTf.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel2.add(customerNameTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 230, 40));

        reasonTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        reasonTf.setToolTipText("");
        reasonTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        reasonTf.setEnabled(false);
        jPanel2.add(reasonTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 230, 40));

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel8.setText("Search customer name");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, 190, 30));

        jLabel9.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel9.setText("Customer Name");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, 40));

        jLabel10.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel10.setText("Reason");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, 40));

        updateBtn.setBackground(new java.awt.Color(44, 119, 33));
        updateBtn.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/updated.png"))); // NOI18N
        updateBtn.setText("UPDATE");
        updateBtn.setEnabled(false);
        updateBtn.setFocusable(false);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jPanel2.add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 340, 140, 50));

        addNewProductBtn.setBackground(new java.awt.Color(44, 119, 33));
        addNewProductBtn.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        addNewProductBtn.setForeground(new java.awt.Color(255, 255, 255));
        addNewProductBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        addNewProductBtn.setText("ADD NEW TRANSACTION");
        addNewProductBtn.setFocusable(false);
        addNewProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewProductBtnActionPerformed(evt);
            }
        });
        jPanel2.add(addNewProductBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 290, 50));

        jLabel13.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel13.setText("Product ID");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, -1, 40));

        searchTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        searchTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTfKeyReleased(evt);
            }
        });
        jPanel2.add(searchTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 40, 180, 30));

        editBtn.setBackground(new java.awt.Color(44, 119, 33));
        editBtn.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        editBtn.setForeground(new java.awt.Color(255, 255, 255));
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setFocusable(false);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        jPanel2.add(editBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 110, 50));

        returnedProductsTable.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        returnedProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Returned Product ID", "Customer ID", "Customer Name", "Product ID", "Stocks Returned", "Reason", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        returnedProductsTable.getTableHeader().setReorderingAllowed(false);
        returnedProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnedProductsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(returnedProductsTable);
        if (returnedProductsTable.getColumnModel().getColumnCount() > 0) {
            returnedProductsTable.getColumnModel().getColumn(0).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(1).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(2).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            returnedProductsTable.getColumnModel().getColumn(3).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            returnedProductsTable.getColumnModel().getColumn(4).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(5).setResizable(false);
            returnedProductsTable.getColumnModel().getColumn(6).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 1030, 310));

        refreshBtn.setBackground(new java.awt.Color(44, 119, 33));
        refreshBtn.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh (1).png"))); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.setFocusable(false);
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        jPanel2.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1380, 30, 120, 40));

        stocksReturnedTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        stocksReturnedTf.setToolTipText("");
        stocksReturnedTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        stocksReturnedTf.setEnabled(false);
        jPanel2.add(stocksReturnedTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, 230, 40));

        jLabel11.setFont(new java.awt.Font("Franklin Gothic Book", 1, 22)); // NOI18N
        jLabel11.setText("Stocks Returned");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, 40));

        productIdTf.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        productIdTf.setToolTipText("");
        productIdTf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 224, 145)));
        productIdTf.setEnabled(false);
        productIdTf.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jPanel2.add(productIdTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 230, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 1540, 430));

        jPanel1.setBackground(new java.awt.Color(0, 224, 145));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Returned Products");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 410, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1540, 70));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public void refreshTable(){
        returnedProductsTable.setModel(new DefaultTableModel(null, new String[]{"Returned Product ID", "Customer ID", "Customer Name", "Product Id", "Stocks Returned", "Reason", "Date"}));
        setRecordsToTable();
    }
    
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        
        if(stocksReturnedTf.getText().matches(".*[a-zA-Z]+.*")){
            JOptionPane.showMessageDialog(this, "Incorrect Input!", "Error", JOptionPane.ERROR_MESSAGE);
            stocksReturnedTf.setText("");
        }
        int i = returnedProductsTable.getSelectedRow();
        TableModel model = returnedProductsTable.getModel();
        String currentStocksReturned = model.getValueAt(i, 4).toString();
        String stocksReturnedUpdate = stocksReturnedTf.getText();
        int row = returnedProductsTable.getSelectedRow();
        String id = model.getValueAt(i, 0).toString();
        String product_id = model.getValueAt(i, 3).toString();
        
        int currentStocksReturneda = Integer.valueOf(currentStocksReturned);
        int stocksReturnedUpdatea = Integer.valueOf(stocksReturnedUpdate);
        
        String reason = reasonTf.getText();

        if(stocksReturnedTf.getText().equals("") || reasonTf.getText().equals("") ){
            JOptionPane.showMessageDialog(this, "Please enter all data needed!");
            
        }else{
        if(currentStocksReturneda == stocksReturnedUpdatea){
            
            //reason only to be updated
            //stock should not be modify
            
            try{
                Statement s = DBConnector.mycon().createStatement();
                String query = "UPDATE returned_products SET reason='"+reason+"' where returned_product_id=" + id;

                s.executeUpdate(query);

                JOptionPane.showMessageDialog(null, "Updated Successfully!");

                refreshTable();

                reasonTf.setEnabled(false);
                stocksReturnedTf.setEnabled(false);

            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        else{

            try{
                Statement s = DBConnector.mycon().createStatement();
                String query = "UPDATE returned_products SET stocksreturned='"+stocksReturnedUpdate+"', reason='"+reason+"' where returned_product_id=" + id;

                s.executeUpdate(query);

                JOptionPane.showMessageDialog(null, "Updated Successfully!");

                refreshTable();

                reasonTf.setEnabled(false);
                stocksReturnedTf.setEnabled(false);

            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }
            
            //stocks to be updated
            try{
                int stockToBeAdjusted = 0;
                int differenceInStocksReturned = stocksReturnedUpdatea - currentStocksReturneda;
                int currentStocksA = Integer.valueOf(currentStocks);
                
                
                if(differenceInStocksReturned > 0){
                    stockToBeAdjusted = currentStocksA + differenceInStocksReturned;

                }else if(differenceInStocksReturned < 0){
                    stockToBeAdjusted = currentStocksA + differenceInStocksReturned;
                }
                
                String stockUpdate = String.valueOf(stockToBeAdjusted);
                Statement s = DBConnector.mycon().createStatement();
                String query = "UPDATE product_maintenance SET stocks='"+stockUpdate+"' where product_id=" + product_id;
                
                s.executeUpdate(query);

                JOptionPane.showMessageDialog(null, "Stock Updated Successfully!");
                refreshTable();
                
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void addNewProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewProductBtnActionPerformed
        AddNewReturnedProduct a = new AddNewReturnedProduct();
        a.setVisible(true);
    }//GEN-LAST:event_addNewProductBtnActionPerformed

    private void searchTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTfKeyReleased
        DefaultTableModel table = (DefaultTableModel)returnedProductsTable.getModel();
        String search = searchTf.getText();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table);
        returnedProductsTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_searchTfKeyReleased

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        reasonTf.setEnabled(true);
        stocksReturnedTf.setEnabled(true);
        updateBtn.setEnabled(true);
    }//GEN-LAST:event_editBtnActionPerformed

    private void returnedProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnedProductsTableMouseClicked
        updateBtn.setEnabled(false);
        
        int i = returnedProductsTable.getSelectedRow();
        TableModel model = returnedProductsTable.getModel();
        customerNameTf.setText(model.getValueAt(i, 2).toString());
        productIdTf.setText(model.getValueAt(i, 3).toString());
        stocksReturnedTf.setText(model.getValueAt(i, 4).toString());
        reasonTf.setText(model.getValueAt(i, 5).toString());
        
        reasonTf.setEnabled(false);
        stocksReturnedTf.setEnabled(false);
        
        String product_id = productIdTf.getText();
        try{
            Statement s = DBConnector.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT stocks FROM product_maintenance WHERE product_id ='"+product_id+"' ");
            if(rs.next()){
                
                currentStocks = (rs.getString("stocks"));
                
            }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e);
        }

    }//GEN-LAST:event_returnedProductsTableMouseClicked

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        refreshTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnedProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnedProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnedProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnedProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnedProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewProductBtn;
    private javax.swing.JTextField customerNameTf;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField productIdTf;
    private javax.swing.JTextField reasonTf;
    private javax.swing.JButton refreshBtn;
    public javax.swing.JTable returnedProductsTable;
    private javax.swing.JTextField searchTf;
    private javax.swing.JTextField stocksReturnedTf;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
